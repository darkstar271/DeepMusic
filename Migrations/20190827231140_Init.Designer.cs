// <auto-generated />
using System;
using DeepMusic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeepMusic.Migrations
{
    [DbContext(typeof(DeepMusicDbContext))]
    [Migration("20190827231140_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("DeepMusic.Models.Albums", b =>
                {
                    b.Property<int>("Album_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlbumCoverPath");

                    b.Property<string>("ArtistName");

                    b.Property<string>("Genre");

                    b.Property<string>("TrackName");

                    b.Property<int?>("TracksTrack_ID");

                    b.HasKey("Album_ID");

                    b.HasIndex("TracksTrack_ID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("DeepMusic.Models.Artist", b =>
                {
                    b.Property<int>("Artist_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Album");

                    b.Property<string>("AlbumCoverPath");

                    b.Property<int?>("AlbumsAlbum_ID");

                    b.Property<string>("ArtistName");

                    b.Property<string>("Genre");

                    b.HasKey("Artist_ID");

                    b.HasIndex("AlbumsAlbum_ID");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("DeepMusic.Models.Genres", b =>
                {
                    b.Property<int>("Genres_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Genre");

                    b.HasKey("Genres_ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DeepMusic.Models.Tracks", b =>
                {
                    b.Property<int>("Track_ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Album");

                    b.Property<string>("ArtistName");

                    b.Property<string>("Genre");

                    b.Property<int?>("Genres_ID");

                    b.Property<int>("Time");

                    b.HasKey("Track_ID");

                    b.HasIndex("Genres_ID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("DeepMusic.Models.Albums", b =>
                {
                    b.HasOne("DeepMusic.Models.Tracks", "Tracks")
                        .WithMany()
                        .HasForeignKey("TracksTrack_ID");
                });

            modelBuilder.Entity("DeepMusic.Models.Artist", b =>
                {
                    b.HasOne("DeepMusic.Models.Albums", "Albums")
                        .WithMany()
                        .HasForeignKey("AlbumsAlbum_ID");
                });

            modelBuilder.Entity("DeepMusic.Models.Tracks", b =>
                {
                    b.HasOne("DeepMusic.Models.Genres", "Genres")
                        .WithMany()
                        .HasForeignKey("Genres_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
